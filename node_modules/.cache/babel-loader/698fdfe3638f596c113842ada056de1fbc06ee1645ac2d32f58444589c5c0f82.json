{"ast":null,"code":"import { db } from \"./firebase\";\nexport default {\n  /**\n   * this function will be fired when you first time run the app,\n   * and it will fetch first 5 posts, here I retrieve them in descending order, until the last added post appears first.\n   */\n  postsFirstBatch: async function () {\n    try {\n      const data = await db.collection(\"songs\").orderBy(\"createdAt\", \"desc\").limit(5).get();\n      let posts = [];\n      let lastKey = \"\";\n      data.forEach(doc => {\n        posts.push({\n          postId: doc.id,\n          postContent: doc.data().postContent\n        });\n        lastKey = doc.data().createdAt;\n      });\n      return {\n        posts,\n        lastKey\n      };\n    } catch (e) {\n      console.log(e);\n    }\n  },\n  /**\n   * this function will be fired each time the user click on 'More Posts' button,\n   * it receive key of last post in previous batch, then fetch next 5 posts\n   * starting after last fetched post.\n   */\n  postsNextBatch: async key => {\n    try {\n      const data = await db.collection(\"songs\").orderBy(\"createdAt\", \"desc\").startAfter(key).limit(5).get();\n      let posts = [];\n      let lastKey = \"\";\n      data.forEach(doc => {\n        posts.push({\n          postId: doc.id,\n          postContent: doc.data().postContent\n        });\n        lastKey = doc.data().createdAt;\n      });\n      return {\n        posts,\n        lastKey\n      };\n    } catch (e) {\n      console.log(e);\n    }\n  }\n};","map":{"version":3,"names":["db","postsFirstBatch","data","collection","orderBy","limit","get","posts","lastKey","forEach","doc","push","postId","id","postContent","createdAt","e","console","log","postsNextBatch","key","startAfter"],"sources":["/home/pro/Development/React.js/Projects/music/src/lib/datascroller.js"],"sourcesContent":["import { db } from \"./firebase\";\n\nexport default {\n  /**\n   * this function will be fired when you first time run the app,\n   * and it will fetch first 5 posts, here I retrieve them in descending order, until the last added post appears first.\n   */\n  postsFirstBatch: async function () {\n    try {\n      const data = await db\n        .collection(\"songs\")\n        .orderBy(\"createdAt\", \"desc\")\n        .limit(5)\n        .get();\n\n      let posts = [];\n      let lastKey = \"\";\n      data.forEach((doc) => {\n        posts.push({\n          postId: doc.id,\n          postContent: doc.data().postContent,\n        });\n        lastKey = doc.data().createdAt;\n      });\n\n      return { posts, lastKey };\n    } catch (e) {\n      console.log(e);\n    }\n  },\n\n  /**\n   * this function will be fired each time the user click on 'More Posts' button,\n   * it receive key of last post in previous batch, then fetch next 5 posts\n   * starting after last fetched post.\n   */\n  postsNextBatch: async (key) => {\n    try {\n      const data = await db\n        .collection(\"songs\")\n        .orderBy(\"createdAt\", \"desc\")\n        .startAfter(key)\n        .limit(5)\n        .get();\n\n      let posts = [];\n      let lastKey = \"\";\n      data.forEach((doc) => {\n        posts.push({\n          postId: doc.id,\n          postContent: doc.data().postContent,\n        });\n        lastKey = doc.data().createdAt;\n      });\n      return { posts, lastKey };\n    } catch (e) {\n      console.log(e);\n    }\n  },\n};\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,YAAY;AAE/B,eAAe;EACb;AACF;AACA;AACA;EACEC,eAAe,EAAE,kBAAkB;IACjC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMF,EAAE,CAClBG,UAAU,CAAC,OAAO,CAAC,CACnBC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5BC,KAAK,CAAC,CAAC,CAAC,CACRC,GAAG,EAAE;MAER,IAAIC,KAAK,GAAG,EAAE;MACd,IAAIC,OAAO,GAAG,EAAE;MAChBN,IAAI,CAACO,OAAO,CAAEC,GAAG,IAAK;QACpBH,KAAK,CAACI,IAAI,CAAC;UACTC,MAAM,EAAEF,GAAG,CAACG,EAAE;UACdC,WAAW,EAAEJ,GAAG,CAACR,IAAI,EAAE,CAACY;QAC1B,CAAC,CAAC;QACFN,OAAO,GAAGE,GAAG,CAACR,IAAI,EAAE,CAACa,SAAS;MAChC,CAAC,CAAC;MAEF,OAAO;QAAER,KAAK;QAAEC;MAAQ,CAAC;IAC3B,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEG,cAAc,EAAE,MAAOC,GAAG,IAAK;IAC7B,IAAI;MACF,MAAMlB,IAAI,GAAG,MAAMF,EAAE,CAClBG,UAAU,CAAC,OAAO,CAAC,CACnBC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAC5BiB,UAAU,CAACD,GAAG,CAAC,CACff,KAAK,CAAC,CAAC,CAAC,CACRC,GAAG,EAAE;MAER,IAAIC,KAAK,GAAG,EAAE;MACd,IAAIC,OAAO,GAAG,EAAE;MAChBN,IAAI,CAACO,OAAO,CAAEC,GAAG,IAAK;QACpBH,KAAK,CAACI,IAAI,CAAC;UACTC,MAAM,EAAEF,GAAG,CAACG,EAAE;UACdC,WAAW,EAAEJ,GAAG,CAACR,IAAI,EAAE,CAACY;QAC1B,CAAC,CAAC;QACFN,OAAO,GAAGE,GAAG,CAACR,IAAI,EAAE,CAACa,SAAS;MAChC,CAAC,CAAC;MACF,OAAO;QAAER,KAAK;QAAEC;MAAQ,CAAC;IAC3B,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IAChB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}